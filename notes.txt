*****************************************************************************
   since the model that we are making returns values that are good for the classification
   so its good for YES or NO ...CROSS or NOT ..so the usage is  going to be something like that 
   **** So if i want to prdict the prices 
---> we will be  using the model to predict if the next prices are going to *
 be crossing the ma 20 down or up indicating the death of the trend         *
   as a exit point , after we put a far tp in case something happens to the *
   VM 



the problem that i want to solve is a regression problem 
---> so the MSE (mean squared error) loss function will be a nice choice 
---> and beside it i will chose the adam optimizer

-------------------------breaking down test.py code -----------------
we have a layer dense that is connected to the relue activation function and the output 
of the first layer is going to be the input of the second layer that is activated with the 
SOFTMAX function 
----> now i got to check the data type of the input and try to mimic this to my dataframe
______ > the type is a list , noe how can i turn it to a dataframe , or make the layer dense
take dataframe data instead of a list 
first of all i will split the data and turn it into csv files 

i got to know how to pass the data threw the layers in order to train the model
first of all what are the functions that i need to train the model with 

so i have a relu and SOFTMAX that i can connect to the dense layer to structure
a lstm or a simple neural network 
but the trainung is something different because i need in this problem the adam 
optimizer for the sake of making the weights and biases in the perfect fit to 
make more greate predictions 

so ..
i need to know how to train the model 
and one of the functions that i will need in place is the adam optimizer 
... need to split the data so i can feed it to the model and of course this is 
different in what i want to predict so i might do some changes in the dense layer
---> they feed the data in model as numpy layers .... means that im going to push 
OHLC data as seperate arrays 


-----> now the problem is how can build the model
 so i can pass it threw the optimizer , and its returned in the train_model funcion

i turned my dataframe into numpy arrays 
but now how can i pass the features threw the lstm
----------------------------------------------------------------------
should i use the  MinMaxScaler instead of the softmax activation 
because the problem is not classification
the answer ---> *FIRST* the MinMaxScaler is used to enhance the performance of the neural network
by scaling the data values but in the this case the values are almost the same they dont need 
to be scaled 
*SECOND* the softmax activation function is used for classification problems while we 
are trying to solve a regression problem 
  softmax not also a choce ... the choice is relue and tanh

------------------------ starting the data feeding into the layers ----------------


------------------------- the problem with the data feed is i dont realy know how i can 
 select the predicted data 
first thing im going to compare between s and the close prices nupy arrays
---- basicaly they are different s is a matrix and the close prices are a numpy array

so first im going to tweek s to make it an array and see what will happen
s = [
  [1 , 2 , 3, 4],
  [6 , 7 , 8 , 9],
  [10 , 11 , 12 , 13]
]
so it will be like this 

s = [
  [1 , 2 , 3, 4],
]

the shape is (1,4) means i still oing to pass 4 as the input number in the layer
so i can replace it with   s.shape[1]
the problem is my numpy array is not the same shape , so i need to transpose it 
so we get (the inputs * the weights )


--------------- linear regression ------------
linear regression is a suprevised ML algorithm 
there is three types of it 
--> simple linear regression
--> multiple linear regression
--> polynominal linear regression


------->  okay so we will be passing some data threw the linear regression 
the training of the model is going to be with the gradient decent algorithm
 
ok now i need to split my dataset



data = pd.read_csv('mydata')
data = data.drop('index', axis=1)  # Droping the index
data = data.values # converting mydata frame to numpy arrays

x = data[: , 1]# with this way im selecting a COLUMN ..if.. i switch 1 and : i get a ROW
_________________________________________________________________________________________
spliting the data 
since the linear regression is trying to make the 
X = data[:, :1] # and i guess this my input data 
y = data[:, -1]  # this is my target data 


----------
i got to clean the data from the index
 split the data 
so ----the features ---OHLC 
AND THE TARGET IS THE SMA 20 
-------------last data 
287,1.0772,1.07732,1.07735,1.07718,1.0767920000000009
288,1.07729,1.07726,1.0773,1.07721,1.076821500000001
289,1.07735,1.07728,1.07737,1.07726,1.076854500000001
290,1.07737,1.07736,1.0774,1.07734,1.0768985000000009
291,1.07724,1.07736,1.07736,1.07719,1.076942000000001
292,1.07705,1.07723,1.07724,1.07702,1.0769675000000007
293,1.07718,1.07705,1.0772,1.07705,1.0770030000000008
294,1.07722,1.07715,1.07724,1.07714,1.0770340000000007
295,1.07717,1.07723,1.07723,1.07713,1.0770660000000007
296,1.07704,1.07716,1.07718,1.07703,1.0770875000000009
297,1.077,1.07706,1.07711,1.07697,1.0771110000000008
298,1.07686,1.077,1.07703,1.07683,1.0771190000000008
299,1.07665,1.07665,1.07669,1.07665,1.077118000000001

---------
no since i had the plot . igot to tweek a bit 
add the plot of the predicted values to the plot with different color 
add the real values of the ma20 that i had cutted from the df 
 now i got to plot the new ma values by making the data above as a new dataframe
 